buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.spongepowered.org/repository/maven-public" }
        mavenCentral()
        gradlePluginPortal()
        google()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7.+'
        classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.1"
        //classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
    }
}

plugins {
    id "io.github.CDAGaming.cursegradle" version "1.6.0"
    id 'nebula.release' version '15.3.1'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: "com.github.johnrengelman.shadow"

group = 'com.aki'
version = 'v1.0.0-mc1.12.2'

java {
    archivesBaseName = 'advanced_industry'
    toolchain.languageVersion = JavaLanguageVersion.of(8)
    withSourcesJar()
}

jar {
    manifest {
        attributes 'FMLAT': 'advanced_industry_at.cfg'
    }
}

def defaultEncoding = 'UTF-8'
compileJava {
    options.encoding = defaultEncoding
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jar.manifest.attributes(
        'ModSide': 'CLIENT',
        'FMLCorePluginContainsFMLMod': true,
        'FMLCorePlugin': 'com.aki.advanced_industry.MixinModLoadConfig',
        'ForceLoadAsMod': true,
        'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
        'TweakOrder': '0',
        'FMLAT': 'advanced_industry_at.cfg',
        'MixinConfigs': "mixins.advanced_industry.json,mixins.modloaderfix.json,mixins.vanillafixer.json"
)

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings channel: 'snapshot', version: '20171003-1.12'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    accessTransformer = file('src/main/resources/META-INF/advanced_industry_at.cfg')

    def customJvms = [
            //"-Dfml.coreMods.load=com.aki.memoryopener.MemModLoadConfig",
            '-Dfml.coreMods.load=com.aki.advanced_industry.MixinModLoadConfig',
            "-Dmixin.hotSwap=true",
            "-Dmixin.checks.interfaces=true",
            "-Dmixin.debug.export=true"
    ]

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            jvmArgs.addAll(customJvms)


            mods {
                modsfix {
                    source sourceSets.main
                }
            }
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            jvmArgs.addAll(customJvms)


            mods {
                modsfix {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://repo.spongepowered.org/repository/maven-public/"
    }
    maven {
        name = "Curse Maven"
        url "https://www.cursemaven.com"
    }
    maven {
        name "MixinBooter"
        url "https://maven.cleanroommc.com/"
        content {
            includeGroup "zone.rong"
        }
    }

    ivy {
        url "https://media.forgecdn.net/files/"

        patternLayout {
            artifact "[organisation]/[module]/[revision].[ext]"
        }

        metadataSources {
            artifact()
        }
    }
    mavenCentral()
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'

    implementation fileTree(include: ['*.jar'], dir: 'modsrc')
    //implementation fg.deobf("moze_intel.projecte:ProjectE:1.12.2-1.4.1")

    //implementation "zone.rong:mixinbooter:7.0"

    annotationProcessor 'org.spongepowered:mixin:0.8.3:processor'

    embed ('org.spongepowered:mixin:0.8.3') {
        exclude module: "asm-commons"
        exclude module: "asm-tree"
        exclude module: "launchwrapper"
        exclude module: "guava"
        exclude module: "log4j-core"
        exclude module: "gson"
        exclude module: "commons-io"
    }
}



mixin {
    add sourceSets.main, 'advanced_industry.refmap.json'
    //config 'mixins.memoryopener.json'
    //config 'mixins.other_mods.json'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    manifest {
        attributes([
            "Specification-Title": "advanced_industry",
            //"Specification-Vendor": "com.aki",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            //"Implementation-Vendor" :"examplemodsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

jar.finalizedBy('reobfJar')

shadowJar {
    archiveClassifier.set(null)
    configurations = [project.configurations.embed]
}

processResources {
    inputs.property('version', version)

    filesMatching('mcmod.info') {
        expand version: inputs.properties.get('version')
    }
}

task thinShadowJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    archiveClassifier.set("thin")
    configurations = [project.configurations.embed]
    relocators = shadowJar.relocators

    dependencies {
        exclude(dependency("org.spongepowered:mixin"))
    }

    manifest {
        inheritFrom jar.manifest
    }

    from sourceSets.main.output
}

/*task commit(type: GitCommit) {
    message = "こみっとー"
}*/

artifacts {
    archives jar
    archives shadowJar
    archives sourcesJar
    archives thinShadowJar
}

reobf {
    shadowJar {}
    thinShadowJar {}
}

copy {
    delete {
        delete "$buildDir/classes/java/main"
    }

    from sourceSets.main.resources
    into "$buildDir/classes/java/main"
}
